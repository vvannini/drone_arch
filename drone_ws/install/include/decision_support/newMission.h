// Generated by gencpp from file decision_support/newMission.msg
// DO NOT EDIT!


#ifndef DECISION_SUPPORT_MESSAGE_NEWMISSION_H
#define DECISION_SUPPORT_MESSAGE_NEWMISSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mavros_msgs/Waypoint.h>

namespace decision_support
{
template <class ContainerAllocator>
struct newMission_
{
  typedef newMission_<ContainerAllocator> Type;

  newMission_()
    : option(0)
    , nWaypoints(0)
    , waypoints()  {
    }
  newMission_(const ContainerAllocator& _alloc)
    : option(0)
    , nWaypoints(0)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _option_type;
  _option_type option;

   typedef uint32_t _nWaypoints_type;
  _nWaypoints_type nWaypoints;

   typedef std::vector< ::mavros_msgs::Waypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mavros_msgs::Waypoint_<ContainerAllocator> >::other >  _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::decision_support::newMission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::decision_support::newMission_<ContainerAllocator> const> ConstPtr;

}; // struct newMission_

typedef ::decision_support::newMission_<std::allocator<void> > newMission;

typedef boost::shared_ptr< ::decision_support::newMission > newMissionPtr;
typedef boost::shared_ptr< ::decision_support::newMission const> newMissionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::decision_support::newMission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::decision_support::newMission_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace decision_support

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geographic_msgs': ['/opt/ros/melodic/share/geographic_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'mavros_msgs': ['/opt/ros/melodic/share/mavros_msgs/cmake/../msg'], 'decision_support': ['/home/vannini/drone_arch/drone_ws/src/decision_support/msg', '/home/vannini/drone_arch/drone_ws/src/decision_support/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'uuid_msgs': ['/opt/ros/melodic/share/uuid_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::decision_support::newMission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::decision_support::newMission_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_support::newMission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::decision_support::newMission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_support::newMission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::decision_support::newMission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::decision_support::newMission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1625ea9210013ed87a1752191f2182af";
  }

  static const char* value(const ::decision_support::newMission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1625ea9210013ed8ULL;
  static const uint64_t static_value2 = 0x7a1752191f2182afULL;
};

template<class ContainerAllocator>
struct DataType< ::decision_support::newMission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "decision_support/newMission";
  }

  static const char* value(const ::decision_support::newMission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::decision_support::newMission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 option\n"
"uint32 nWaypoints\n"
"mavros_msgs/Waypoint[] waypoints\n"
"================================================================================\n"
"MSG: mavros_msgs/Waypoint\n"
"# Waypoint.msg\n"
"#\n"
"# ROS representation of MAVLink MISSION_ITEM\n"
"# See mavlink documentation\n"
"\n"
"\n"
"\n"
"# see enum MAV_FRAME\n"
"uint8 frame\n"
"uint8 FRAME_GLOBAL = 0\n"
"uint8 FRAME_LOCAL_NED = 1\n"
"uint8 FRAME_MISSION = 2\n"
"uint8 FRAME_GLOBAL_REL_ALT = 3\n"
"uint8 FRAME_LOCAL_ENU = 4\n"
"\n"
"# see enum MAV_CMD and CommandCode.msg\n"
"uint16 command\n"
"\n"
"bool is_current\n"
"bool autocontinue\n"
"# meaning of this params described in enum MAV_CMD\n"
"float32 param1\n"
"float32 param2\n"
"float32 param3\n"
"float32 param4\n"
"float64 x_lat\n"
"float64 y_long\n"
"float64 z_alt\n"
;
  }

  static const char* value(const ::decision_support::newMission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::decision_support::newMission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.option);
      stream.next(m.nWaypoints);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct newMission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::decision_support::newMission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::decision_support::newMission_<ContainerAllocator>& v)
  {
    s << indent << "option: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.option);
    s << indent << "nWaypoints: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nWaypoints);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mavros_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DECISION_SUPPORT_MESSAGE_NEWMISSION_H
