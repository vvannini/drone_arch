version: '{build}'

branches:
  except:
    - /pr\/.+/

environment:
  global:
    PLATFORMTOOLSET: "v140"

  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      BUILD_TYPE: "MSVC17_clang"
      TEST_NSPLIT: "3"
      SPLIT_TEST_NUM: "0"
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      BUILD_TYPE: "MSVC17_clang"
      TEST_NSPLIT: "3"
      SPLIT_TEST_NUM: "1"
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
      BUILD_TYPE: "MSVC17_clang"
      TEST_NSPLIT: "3"
      SPLIT_TEST_NUM: "2"
    - BUILD_TYPE: "MSVC15_clang"
      TEST_NSPLIT: "3"
      SPLIT_TEST_NUM: "0"
    - BUILD_TYPE: "MSVC15_clang"
      TEST_NSPLIT: "3"
      SPLIT_TEST_NUM: "1"
    - BUILD_TYPE: "MSVC15_clang"
      TEST_NSPLIT: "3"
      SPLIT_TEST_NUM: "2"

install:
- if [%BUILD_TYPE%]==[MSVC15_clang] set PATH=C:\Miniconda36-x64\Scripts;%PATH%
- if [%BUILD_TYPE%]==[MSVC15_clang] conda config --add channels conda-forge --force
- if [%BUILD_TYPE%]==[MSVC15_clang] conda create -y --name piranha cmake boost-cpp msgpack-c mppp ninja clangdev
- if [%BUILD_TYPE%]==[MSVC15_clang] call activate piranha
- if [%BUILD_TYPE%]==[MSVC15_clang] clang-cl -v
- if [%BUILD_TYPE%]==[MSVC15_clang] call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" amd64

- if [%BUILD_TYPE%]==[MSVC17_clang] set PATH=C:\Miniconda36-x64\Scripts;%PATH%
- if [%BUILD_TYPE%]==[MSVC17_clang] conda config --add channels conda-forge --force
- if [%BUILD_TYPE%]==[MSVC17_clang] conda create -y --name piranha cmake boost-cpp msgpack-c mppp ninja clangdev
- if [%BUILD_TYPE%]==[MSVC17_clang] call activate piranha
- if [%BUILD_TYPE%]==[MSVC17_clang] clang-cl -v
- if [%BUILD_TYPE%]==[MSVC17_clang] call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat" x64
- if [%BUILD_TYPE%]==[MSVC17_clang] call activate piranha
- if [%BUILD_TYPE%]==[MSVC17_clang] cd %APPVEYOR_BUILD_FOLDER%

build_script:
- mkdir build
- cd build

- if [%BUILD_TYPE%]==[MSVC15_clang] cmake .. -GNinja -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Debug -DPIRANHA_BUILD_TESTS=yes -DPIRANHA_WITH_MSGPACK=yes -DPIRANHA_WITH_BOOST_STACKTRACE=yes -DPIRANHA_TEST_NSPLIT=%TEST_NSPLIT% -DPIRANHA_TEST_SPLIT_NUM=%SPLIT_TEST_NUM%
- if [%BUILD_TYPE%]==[MSVC15_clang] cmake --build . -- -j1 -v

- if [%BUILD_TYPE%]==[MSVC17_clang] cmake .. -GNinja -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_C_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=Debug -DPIRANHA_BUILD_TESTS=yes -DPIRANHA_WITH_MSGPACK=yes -DPIRANHA_WITH_BOOST_STACKTRACE=yes -DPIRANHA_TEST_NSPLIT=%TEST_NSPLIT% -DPIRANHA_TEST_SPLIT_NUM=%SPLIT_TEST_NUM%
- if [%BUILD_TYPE%]==[MSVC17_clang] cmake --build . -- -j1 -v

test_script:
- if [%BUILD_TYPE%]==[MSVC15_clang] ctest -V

- if [%BUILD_TYPE%]==[MSVC17_clang] ctest -V

# Enable this to be able to login to the build worker. You can use the
# `remmina` program in Ubuntu, use the login information that the line below
# prints into the log.
# on_finish:
# - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
